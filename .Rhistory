# 'economic', 'public', 'sector', 'world', 'services', 'million', 'billion',
tidy_speeches <- sona %>%
unnest_tokens(word, speech, token = "words", to_lower = T) %>%
filter(!word %in% stop_words$word) %>%
filter(!word %in% words_to_remove) %>%
filter(!str_detect(word, "[0-9]"))
speech_tdf <- tidy_speeches%>%
group_by(date,word) %>%
count() %>%
ungroup()
dtm_speech <- speech_tdf %>%
cast_dtm(date, word, n)
speech_lda <- LDA(dtm_speech, k = 6, control = list(seed = 2023))
speech_topics <- tidy(speech_lda, matrix = 'beta')
#| label: fig-topterms
#| #| fig-cap: "Time series Plot of Average Sentiment using AFINN Lexicon Scoring System. Higher Values Represent more Positive Sentiment"
top_terms <- speech_topics %>%
group_by(topic) %>%
slice_max(beta, n = 10) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms %>%
mutate(term = reorder_within(term, beta, topic)) %>%
ggplot(aes(beta, term, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
scale_y_reordered()
beta_wide <- speech_topics %>%
mutate(topic = paste0("topic", topic)) %>%
pivot_wider(names_from = topic, values_from = beta) %>%
filter(topic1 > .001 | topic2 > .001) %>%
mutate(log_ratio = log2(topic2 / topic1))
beta_wide
beta_wide %>%
group_by(direction = log_ratio > 0) %>%
top_n(10, abs(log_ratio)) %>%
ungroup() %>%
mutate(term = reorder(term, log_ratio)) %>%
ggplot(aes(term, log_ratio)) +
geom_col() +
labs(y = "Log2 ratio of beta in topic 2 / topic 1") +
coord_flip()
sona$speechId <- as.numeric(speech_lda@documents)
speeches_gamma <- sona %>%
left_join(tidy(speech_lda, matrix = "gamma") %>%
mutate(speechId = as.numeric(document)) %>% # some cleaning to make key variable (reviewId) usable
select(-document) %>%
spread(key = topic, value = gamma, sep = "_"))
speeches_gamma %>%
group_by(speechId) %>%
summarize(ntopic1 = sum(topic_1 > 0.5))
speeches_gamma %>%
group_by(speechId) %>%
summarize(ntopic2 = sum(topic_2 > 0.5))
speeches_gamma %>%
group_by(speechId) %>%
summarize(ntopic3 = sum(topic_3 > 0.5))
speeches_gamma %>%
group_by(speechId) %>%
summarize(ntopic4 = sum(topic_4 > 0.5))
speeches_gamma %>%
group_by(speechId) %>%
summarize(ntopic5 = sum(topic_5 > 0.5))
speeches_gamma %>%
group_by(speechId) %>%
summarize(ntopic6 = sum(topic_6 > 0.5))
speeches_gamma %>%
filter(speechId == "8824") %>%
arrange(desc(topic_1)) %>%
head(3)
posterior(speech_lda)
lda_topics <- tidy(lda_model)
lda_topics <- tidy(speech_lda)
lda_topics
speech_lda$plot
words_to_remove <- c("government", "South Africa", "national",
"country", "south", "africa", "honourable",
"people", 'ensure', 'public', 'continue', 'regard', 'development', 'support', 'africans', 'african', 'programme', 'programmes',  'compatriots', 'including',  'improve', 'address', 'president', 'deputy', 'services', 'chairperson', 'speaker', 'madame', 'economic', 'sector', 'social', 'system', 'service', 'growth', 'million', 'billion', 'past', 'time', 'growth')
# 'economic', 'public', 'sector', 'world', 'services', 'million', 'billion',
tidy_speeches <- sona %>%
unnest_tokens(word, speech, token = "words", to_lower = T) %>%
filter(!word %in% stop_words$word) %>%
filter(!word %in% words_to_remove) %>%
filter(!str_detect(word, "[0-9]"))
speech_tdf <- tidy_speeches%>%
group_by(date,word) %>%
count() %>%
ungroup()
dtm_speech <- speech_tdf %>%
cast_dtm(date, word, n)
speech_lda <- LDA(dtm_speech, k = 6, control = list(seed = 2023))
speech_topics <- tidy(speech_lda, matrix = 'beta')
words_to_remove <- c("government", "South Africa", "national",
"country", "south", "africa", "honourable",
"people", 'ensure', 'public', 'continue', 'regard', 'development', 'support', 'africans', 'african', 'programme', 'programmes',  'compatriots', 'including',  'improve', 'address', 'president', 'deputy', 'services', 'chairperson', 'speaker', 'madame', 'economic', 'sector', 'social', 'system', 'service', 'growth', 'million', 'past', 'time', 'growth')
tidy_speeches <- sona %>%
unnest_tokens(word, speech, token = "words", to_lower = T) %>%
filter(!word %in% stop_words$word) %>%
filter(!word %in% words_to_remove) %>%
filter(!str_detect(word, "[0-9]"))
speech_tdf <- tidy_speeches%>%
group_by(date,word) %>%
count() %>%
ungroup()
dtm_speech <- speech_tdf %>%
cast_dtm(date, word, n)
speech_lda <- LDA(dtm_speech, k = 6, control = list(seed = 2023))
speech_topics <- tidy(speech_lda, matrix = 'beta')
speech_topics
#| label: fig-topterms
#| #| fig-cap: "Time series Plot of Average Sentiment using AFINN Lexicon Scoring System. Higher Values Represent more Positive Sentiment"
top_terms <- speech_topics %>%
group_by(topic) %>%
slice_max(beta, n = 10) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms %>%
mutate(term = reorder_within(term, beta, topic)) %>%
ggplot(aes(beta, term, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
scale_y_reordered()
words_to_remove <- c("government", "South Africa", "national",
"country", "south", "africa", "honourable",
"people", 'ensure', 'public', 'continue', 'regard', 'development', 'support', 'africans', 'african', 'programme', 'programmes',  'compatriots', 'including',  'improve', 'address', 'president', 'deputy', 'services', 'chairperson', 'speaker', 'madame', 'economic', 'sector', 'social', 'system', 'service', 'growth', 'million', 'past', 'time', 'process', 'world', 'progress')
tidy_speeches <- sona %>%
unnest_tokens(word, speech, token = "words", to_lower = T) %>%
filter(!word %in% stop_words$word) %>%
filter(!word %in% words_to_remove) %>%
filter(!str_detect(word, "[0-9]"))
speech_tdf <- tidy_speeches%>%
group_by(date,word) %>%
count() %>%
ungroup()
dtm_speech <- speech_tdf %>%
cast_dtm(date, word, n)
speech_lda <- LDA(dtm_speech, k = 6, control = list(seed = 2023))
speech_topics <- tidy(speech_lda, matrix = 'beta')
#| label: fig-topterms
#| #| fig-cap: "Time series Plot of Average Sentiment using AFINN Lexicon Scoring System. Higher Values Represent more Positive Sentiment"
top_terms <- speech_topics %>%
group_by(topic) %>%
slice_max(beta, n = 10) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms %>%
mutate(term = reorder_within(term, beta, topic)) %>%
ggplot(aes(beta, term, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
scale_y_reordered()
words_to_remove <- c("government", "South Africa", "national",
"country", "south", "africa", "honourable",
"people", 'ensure', 'public', 'continue', 'regard', 'development', 'support', 'africans', 'african', 'programme', 'programmes',  'compatriots', 'including',  'improve', 'address', 'president', 'deputy', 'services', 'chairperson', 'speaker', 'madame', 'sector', 'social', 'system', 'service', 'growth', 'million', 'past', 'time', 'process', 'world', 'progress', 'economy')
tidy_speeches <- sona %>%
unnest_tokens(word, speech, token = "words", to_lower = T) %>%
filter(!word %in% stop_words$word) %>%
filter(!word %in% words_to_remove) %>%
filter(!str_detect(word, "[0-9]"))
speech_tdf <- tidy_speeches%>%
group_by(date,word) %>%
count() %>%
ungroup()
dtm_speech <- speech_tdf %>%
cast_dtm(date, word, n)
speech_lda <- LDA(dtm_speech, k = 6, control = list(seed = 2023))
speech_topics <- tidy(speech_lda, matrix = 'beta')
#| label: fig-topterms
#| #| fig-cap: "Time series Plot of Average Sentiment using AFINN Lexicon Scoring System. Higher Values Represent more Positive Sentiment"
top_terms <- speech_topics %>%
group_by(topic) %>%
slice_max(beta, n = 10) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms %>%
mutate(term = reorder_within(term, beta, topic)) %>%
ggplot(aes(beta, term, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
scale_y_reordered()
words_to_remove <- c("government", "South Africa", "national",
"country", "south", "africa", "honourable",
"people", 'ensure', 'public', 'continue', 'regard', 'development', 'support', 'africans', 'african', 'programme', 'programmes',  'compatriots', 'including',  'improve', 'address', 'president', 'deputy', 'services', 'chairperson', 'speaker', 'madame', 'sector', 'social', 'system', 'service', 'growth', 'million', 'past', 'time', 'process', 'world', 'progress', 'economy', 'economic')
tidy_speeches <- sona %>%
unnest_tokens(word, speech, token = "words", to_lower = T) %>%
filter(!word %in% stop_words$word) %>%
filter(!word %in% words_to_remove) %>%
filter(!str_detect(word, "[0-9]"))
speech_tdf <- tidy_speeches%>%
group_by(date,word) %>%
count() %>%
ungroup()
dtm_speech <- speech_tdf %>%
cast_dtm(date, word, n)
speech_lda <- LDA(dtm_speech, k = 6, control = list(seed = 2023))
speech_topics <- tidy(speech_lda, matrix = 'beta')
#| label: fig-topterms
#| #| fig-cap: "Time series Plot of Average Sentiment using AFINN Lexicon Scoring System. Higher Values Represent more Positive Sentiment"
top_terms <- speech_topics %>%
group_by(topic) %>%
slice_max(beta, n = 10) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms %>%
mutate(term = reorder_within(term, beta, topic)) %>%
ggplot(aes(beta, term, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
scale_y_reordered()
words_to_remove <- c("government", "South Africa", "national",
"country", "south", "africa", "honourable",
"people", 'ensure', 'public', 'continue', 'regard', 'development', 'support', 'africans', 'african', 'programme', 'programmes',  'compatriots', 'including',  'improve', 'address', 'president', 'deputy', 'services', 'chairperson', 'speaker', 'madame', 'sector', 'social', 'system', 'service', 'growth', 'million', 'past', 'time', 'process', 'world', 'progress', 'economy', 'economic', 'cape')
tidy_speeches <- sona %>%
unnest_tokens(word, speech, token = "words", to_lower = T) %>%
filter(!word %in% stop_words$word) %>%
filter(!word %in% words_to_remove) %>%
filter(!str_detect(word, "[0-9]"))
speech_tdf <- tidy_speeches%>%
group_by(date,word) %>%
count() %>%
ungroup()
dtm_speech <- speech_tdf %>%
cast_dtm(date, word, n)
speech_lda <- LDA(dtm_speech, k = 6, control = list(seed = 2023))
speech_topics <- tidy(speech_lda, matrix = 'beta')
#| label: fig-topterms
#| #| fig-cap: "Time series Plot of Average Sentiment using AFINN Lexicon Scoring System. Higher Values Represent more Positive Sentiment"
top_terms <- speech_topics %>%
group_by(topic) %>%
slice_max(beta, n = 10) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms %>%
mutate(term = reorder_within(term, beta, topic)) %>%
ggplot(aes(beta, term, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
scale_y_reordered()
??topic_maps
??topicmaps
words_to_remove <- c("government", "South Africa", "national",
"country", "south", "africa", "honourable",
"people", 'ensure', 'public', 'continue', 'regard', 'development', 'support', 'africans', 'african', 'programme', 'programmes',  'compatriots', 'including',  'improve', 'address', 'president', 'deputy', 'services', 'chairperson', 'speaker', 'madame', 'sector', 'social', 'system', 'service', 'growth', 'million', 'past', 'time', 'process', 'world', 'progress', 'economy', 'economic', 'cape')
tidy_speeches <- sona %>%
unnest_tokens(word, speech, token = "words", to_lower = T) %>%
filter(!word %in% stop_words$word) %>%
filter(!word %in% words_to_remove) %>%
filter(!str_detect(word, "[0-9]"))
speech_tdf <- tidy_speeches%>%
group_by(date,word) %>%
count() %>%
ungroup()
dtm_speech <- speech_tdf %>%
cast_dtm(date, word, n)
speech_lda <- LDA(dtm_speech, k = 10, control = list(seed = 2023))
speech_topics <- tidy(speech_lda, matrix = 'beta')
#| label: fig-topterms
#| #| fig-cap: "Time series Plot of Average Sentiment using AFINN Lexicon Scoring System. Higher Values Represent more Positive Sentiment"
top_terms <- speech_topics %>%
group_by(topic) %>%
slice_max(beta, n = 10) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms %>%
mutate(term = reorder_within(term, beta, topic)) %>%
ggplot(aes(beta, term, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
scale_y_reordered()
words_to_remove <- c("government", "South Africa", "national",
"country", "south", "africa", "honourable",
"people", 'ensure', 'public', 'continue', 'regard', 'development', 'support', 'africans', 'african', 'programme', 'programmes',  'compatriots', 'including',  'improve', 'address', 'president', 'deputy', 'services', 'chairperson', 'speaker', 'madame', 'sector', 'social', 'system', 'service', 'growth', 'million', 'past', 'time', 'process', 'world', 'progress', 'economy', 'economic', 'cape')
tidy_speeches <- sona %>%
unnest_tokens(word, speech, token = "words", to_lower = T) %>%
filter(!word %in% stop_words$word) %>%
filter(!word %in% words_to_remove) %>%
filter(!str_detect(word, "[0-9]"))
speech_tdf <- tidy_speeches%>%
group_by(date,word) %>%
count() %>%
ungroup()
dtm_speech <- speech_tdf %>%
cast_dtm(date, word, n)
speech_lda <- LDA(dtm_speech, k = 8, control = list(seed = 2023))
speech_topics <- tidy(speech_lda, matrix = 'beta')
#| label: fig-topterms
#| #| fig-cap: "Time series Plot of Average Sentiment using AFINN Lexicon Scoring System. Higher Values Represent more Positive Sentiment"
top_terms <- speech_topics %>%
group_by(topic) %>%
slice_max(beta, n = 10) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms %>%
mutate(term = reorder_within(term, beta, topic)) %>%
ggplot(aes(beta, term, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
scale_y_reordered()
beta_wide <- speech_topics %>%
mutate(topic = paste0("topic", topic)) %>%
pivot_wider(names_from = topic, values_from = beta) %>%
filter(topic1 > .001 | topic2 > .001) %>%
mutate(log_ratio = log2(topic2 / topic1))
beta_wide
beta_wide %>%
group_by(direction = log_ratio > 0) %>%
top_n(10, abs(log_ratio)) %>%
ungroup() %>%
mutate(term = reorder(term, log_ratio)) %>%
ggplot(aes(term, log_ratio)) +
geom_col() +
labs(y = "Log2 ratio of beta in topic 2 / topic 1") +
coord_flip()
sona$speechId <- as.numeric(speech_lda@documents)
speeches_gamma <- sona %>%
left_join(tidy(speech_lda, matrix = "gamma") %>%
mutate(speechId = as.numeric(document)) %>% # some cleaning to make key variable (reviewId) usable
select(-document) %>%
spread(key = topic, value = gamma, sep = "_"))
speeches_gamma %>%
group_by(speechId) %>%
summarize(ntopic1 = sum(topic_1 > 0.5), ntopic2 = sum(topic_2 > 0.5))
sona_with_topics <- cbind(sona, beta_wide)
beta_wide
View(beta_wide)
speeches_gamma %>%
group_by(year) %>%
summarize(ntopic1 = sum(topic_1 > 0.5), ntopic2 = sum(topic_2 > 0.5))
speeches_gamma %>%
group_by(date) %>%
summarize(ntopic1 = sum(topic_1 > 0.5), ntopic2 = sum(topic_2 > 0.5), ntopic3 = sum(topic_3 > 0.5))
speeches_gamma %>%
group_by(date, president) %>%
summarize(ntopic1 = sum(topic_1 > 0.5), ntopic2 = sum(topic_2 > 0.5), ntopic3 = sum(topic_3 > 0.5))
speeches_gamma %>%
group_by(date, president) %>%
summarize(ntopic1 = sum(topic_1 > 0.5), ntopic2 = sum(topic_2 > 0.5), ntopic3 = sum(topic_3 > 0.5), ntopic4 = sum(topic_4 > 0.5), ntopic5 = sum(topic_5 > 0.5), ntopic6 = sum(topic_6 > 0.5), ntopic7 = sum(topic_7 > 0.5), ntopic8 = sum(topic_8 > 0.5))
# Reshape the data to long format for plotting
speeches_long <- speeches_gamma %>%
gather(topic, proportion, starts_with("topic")) %>%
mutate(topic = sub("topic_", "", topic) %>% as.numeric()) %>%
filter(proportion > 0.5)
# Create a stacked bar plot
ggplot(speeches_long, aes(x = date, fill = factor(topic))) +
geom_bar() +
labs(x = "Year", y = "Number of Speeches", fill = "Topic") +
scale_fill_discrete(name = "Topic") +
theme_minimal()
all_years <- unique(speeches_long$date)
# Create a stacked bar plot
ggplot(speeches_long, aes(x = factor(date, levels = all_years), fill = factor(topic))) +
geom_bar() +
labs(x = "Year", y = "Number of Speeches", fill = "Topic") +
scale_fill_discrete(name = "Topic") +
theme_minimal() +
scale_x_discrete(expand = c(0, 0))
all_years <- unique(speeches_long$year)
all_years <- unique(speeches_long$year)
# Create a stacked bar plot
ggplot(speeches_long, aes(x = factor(year, levels = all_years), fill = factor(topic))) +
geom_bar() +
labs(x = "Year", y = "Number of Speeches", fill = "Topic") +
scale_fill_discrete(name = "Topic") +
theme_minimal() +
scale_x_discrete(expand = c(0, 0))
speeches_long
# Reorder the years
speeches_long$date <- factor(speeches_long$date, levels = all_years)
speeches_long$date
# Create a stacked bar plot
ggplot(speeches_long, aes(x = factor(year, levels = all_years), fill = factor(topic))) +
geom_bar() +
labs(x = "Year", y = "Number of Speeches", fill = "Topic") +
scale_fill_discrete(name = "Topic") +
theme_minimal() +
scale_x_discrete(expand = c(0, 0))
# Reshape the data to long format for plotting
speeches_long <- speeches_gamma %>%
gather(topic, proportion, starts_with("topic")) %>%
mutate(topic = sub("topic_", "", topic) %>% as.numeric()) %>%
filter(proportion > 0.5)
all_years <- unique(speeches_long$year)
# Reorder the years
speeches_long$year <- factor(speeches_long$year, levels = all_years)
# Create a stacked bar plot
ggplot(speeches_long, aes(x = factor(year, levels = all_years), fill = factor(topic))) +
geom_bar() +
labs(x = "Year", y = "Number of Speeches", fill = "Topic") +
scale_fill_discrete(name = "Topic") +
theme_minimal() +
scale_x_discrete(expand = c(0, 0))
all_years
order(all_years)
order(speeches_long$year)
arrange(speeches_long$year)
# Reshape the data to long format for plotting
speeches_long <- speeches_gamma %>%
gather(topic, proportion, starts_with("topic")) %>%
mutate(topic = sub("topic_", "", topic) %>% as.numeric()) %>%
filter(proportion > 0.5) %>%
arrange(year)
all_years <- unique(speeches_long$year)
all_years
# Create a stacked bar plot
ggplot(speeches_long, aes(x = factor(year, levels = all_years), fill = factor(topic))) +
geom_bar() +
labs(x = "Year", y = "Number of Speeches", fill = "Topic") +
scale_fill_discrete(name = "Topic") +
theme_minimal() +
scale_x_discrete(expand = c(0, 0))
speech_topics
speeches_gamma %>%
group_by(date, president) %>%
summarize('National Aspirations and Democracy' = sum(topic_1 > 0.5), ntopic2 = sum(topic_2 > 0.5), ntopic3 = sum(topic_3 > 0.5), ntopic4 = sum(topic_4 > 0.5), ntopic5 = sum(topic_5 > 0.5), ntopic6 = sum(topic_6 > 0.5), ntopic7 = sum(topic_7 > 0.5), ntopic8 = sum(topic_8 > 0.5))
speeches_gamma %>%
group_by(date, president) %>%
summarize('National Aspirations and Democracy' = sum(topic_1 > 0.5), 'Security, Jobs, and Local Development' = sum(topic_2 > 0.5), 'Societal Implementation and Poverty Alleviation' = sum(topic_3 > 0.5), 'Infrastructure, Business, and Education' = sum(topic_4 > 0.5), 'Business Investment and Health' = sum(topic_5 > 0.5), 'Society, Security, and Local Governance' = sum(topic_6 > 0.5), 'Human Welfare, Peace, and Global Engagement' = sum(topic_7 > 0.5), 'Infrastructure Investment and Anti-Corruption' = sum(topic_8 > 0.5))
speeches_gamma %>%
group_by(speechId) %>%
summarize(ntopic6 = sum(topic_6 > 0.5))
# Reshape the data to long format for plotting
speeches_long <- speeches_gamma %>%
gather(topic, proportion, starts_with("topic")) %>%
mutate(topic = sub("topic_", "", topic) %>% as.numeric()) %>%
filter(proportion > 0.5) %>%
arrange(year, president)
all_years <- unique(speeches_long$year)
# Create a stacked bar plot
ggplot(speeches_long, aes(x = factor(year, levels = all_years), fill = factor(topic))) +
geom_bar() +
labs(x = "Year", y = "Number of Speeches", fill = "Topic") +
scale_fill_discrete(name = "Topic") +
theme_minimal() +
scale_x_discrete(expand = c(0, 0))
speeches_long$topic
# Reshape the data to long format for plotting
speeches_long <- speeches_gamma %>%
gather(topic, proportion, starts_with("topic")) %>%
mutate(topic = sub("topic_", "", topic) %>% as.numeric()) %>%
filter(proportion > 0.5) %>%
arrange(year, president) %>%
row.names(speeches_long)[row.names(speeches_long) == 1] <- "1: National Aspirations and Democracy"
row.names(speeches_long)[row.names(speeches_long) == 1] <- "1: National Aspirations and Democracy"
# Create a stacked bar plot
ggplot(speeches_long, aes(x = factor(year, levels = all_years), fill = factor(topic))) +
geom_bar() +
labs(x = "Year", y = "Number of Speeches", fill = "Topic") +
scale_fill_discrete(name = "Topic") +
theme_minimal() +
scale_x_discrete(expand = c(0, 0))
head(speeches_long)
# Reshape the data to long format for plotting
speeches_long <- speeches_gamma %>%
gather(topic, proportion, starts_with("topic")) %>%
mutate(topic = sub("topic_", "", topic) %>% as.numeric()) %>%
filter(proportion > 0.5) %>%
arrange(year, president)
speeches_long['topic'][speeches_long['topic'] == 1] <- '1: National Aspirations and Democracy'
# Create a stacked bar plot
ggplot(speeches_long, aes(x = factor(year, levels = all_years), fill = factor(topic))) +
geom_bar() +
labs(x = "Year", y = "Number of Speeches", fill = "Topic") +
scale_fill_discrete(name = "Topic") +
theme_minimal() +
scale_x_discrete(expand = c(0, 0))
rm(speech_tdf_2019, speech_tdf_2020)
rm(speech_lda_2019, speech_lda_2020)
rm(dtm_speech_2019, dtm_speech_2020)
rm(speech_topics_2019, speech_topics_2020)
rm(tidy_speeches_2019, tidy_speeches_2020, top_terms_2019, top_terms_2020)
# Reshape the data to long format for plotting
speeches_long <- speeches_gamma %>%
gather(topic, proportion, starts_with("topic")) %>%
mutate(topic = sub("topic_", "", topic) %>% as.numeric()) %>%
filter(proportion > 0.5) %>%
arrange(year, president)
speeches_long['topic'][speeches_long['topic'] == 1] <- '1: National Aspirations and Democracy'
speeches_long['topic'][speeches_long['topic'] == 2] <- '2: Security, Jobs, and Local Development'
speeches_long['topic'][speeches_long['topic'] == 3] <- '3: Societal Implementation and Poverty Alleviation'
speeches_long['topic'][speeches_long['topic'] == 4] <- '4: Infrastructure, Business, and Education'
speeches_long['topic'][speeches_long['topic'] == 5] <- '5: Business Investment and Health'
speeches_long['topic'][speeches_long['topic'] == 6] <- '6: Society, Security, and Local Governance'
speeches_long['topic'][speeches_long['topic'] == 7] <- '7: Human Welfare, Peace, and Global Engagement'
speeches_long['topic'][speeches_long['topic'] == 7] <- '8: Infrastructure Investment and Anti-Corruption'
# Create a stacked bar plot
ggplot(speeches_long, aes(x = factor(year, levels = all_years), fill = factor(topic))) +
geom_bar() +
labs(x = "Year", y = "Number of Speeches", fill = "Topic") +
scale_fill_discrete(name = "Topic") +
theme_minimal() +
scale_x_discrete(expand = c(0, 0))
# Reshape the data to long format for plotting
speeches_long <- speeches_gamma %>%
gather(topic, proportion, starts_with("topic")) %>%
mutate(topic = sub("topic_", "", topic) %>% as.numeric()) %>%
filter(proportion > 0.5) %>%
arrange(year, president)
speeches_long['topic'][speeches_long['topic'] == 1] <- '1: National Aspirations and Democracy'
speeches_long['topic'][speeches_long['topic'] == 2] <- '2: Security, Jobs, and Local Development'
speeches_long['topic'][speeches_long['topic'] == 3] <- '3: Societal Implementation and Poverty Alleviation'
speeches_long['topic'][speeches_long['topic'] == 4] <- '4: Infrastructure, Business, and Education'
speeches_long['topic'][speeches_long['topic'] == 5] <- '5: Business Investment and Health'
speeches_long['topic'][speeches_long['topic'] == 6] <- '6: Society, Security, and Local Governance'
speeches_long['topic'][speeches_long['topic'] == 7] <- '7: Human Welfare, Peace, and Global Engagement'
speeches_long['topic'][speeches_long['topic'] == 8] <- '8: Infrastructure Investment and Anti-Corruption'
# Create a stacked bar plot
ggplot(speeches_long, aes(x = factor(year, levels = all_years), fill = factor(topic))) +
geom_bar() +
labs(x = "Year", y = "Number of Speeches", fill = "Topic") +
scale_fill_discrete(name = "Topic") +
theme_minimal() +
scale_x_discrete(expand = c(0, 0))
