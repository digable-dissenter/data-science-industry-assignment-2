#| label: fig-topterms
#| #| fig-cap: "Time series Plot of Average Sentiment using AFINN Lexicon Scoring System. Higher Values Represent more Positive Sentiment"
top_terms <- speech_topics %>%
group_by(topic) %>%
top_n(15, beta) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms
View(top_terms)
speech_lda <- LDA(dtm_speech, k = 12, control = list(seed = 2023))
list(top_terms[top_terms['topic'] == 2],c('term')])
top_terms[top_terms$topic == 2]
list(top_terms[top_terms$topic == '2', c('term')])
list(top_terms[top_terms$topic == '3', c('term')])
list(top_terms[top_terms$topic == '4', c('term')])
list(top_terms[top_terms$topic == '5', c('term')])
list(top_terms[top_terms$topic == '6', c('term')])
list(top_terms[top_terms$topic == '7', c('term')])
list(top_terms[top_terms$topic == '8', c('term')])
list(top_terms[top_terms$topic == '9', c('term')])
list(top_terms[top_terms$topic == '10', c('term')])
speech_topics
# Assuming you have a data frame containing your speeches, add the document-topic distribution to it
speech_data_with_topics <- cbind(sona, speech_topics)
library(text2vec)
# Calculate coherence scores for topics
coherence_scores <- topic_model_coherence(speech_lda, dtm_speech)
# Clear global environment
# rm(list=ls())
# Libraries we need
libs <- c('dplyr', 'ggplot2', 'kableExtra', 'lubridate', 'purrr', 'reshape2', 'stringr', 'text2vec', 'tidyr', 'tidytext', 'topicdoc', 'topicmodels', 'tm', 'wordcloud', "kableExtra")
# Install missing libraries
installed_libs <- libs %in% rownames(installed.packages())
if (any(installed_libs == FALSE)) {
install.packages(libs[!installed_libs], repos='http://cran.us.r-project.org')
}
# Load libraries
invisible(lapply(libs, library, character.only = TRUE))
terms(speech_lda, 10)
topic_diagnostics(speech_lda, sona)
topic_diagnostics(speech_lda, dtm_speech, 10)
??map_chr
topic_exclusivity(speech_lda)
topic_coherence(speech_lda, dtm_speech)
#| label: fig-nwords
#| fig-cap: "Most Negative words used by each president"
speech_sentiment %>%
filter(bing_sentiment == 'negative') %>%
count(president, word) %>%
group_by(president) %>% filter(rank(desc(n)) <= 5) %>%
ggplot(aes(reorder(word,n),n)) + geom_col() + facet_wrap(~president) + coord_flip() + xlab('')
tidy_speeches <- sona %>%
unnest_tokens(word, speech, token = "words", to_lower = T) %>%
filter(!word %in% stop_words$word) %>%
#filter(!word %in% words_to_remove) %>%
filter(!str_detect(word, "[0-9]"))
speech_tdf <- tidy_speeches%>%
group_by(date,word) %>%
count() %>%
ungroup()
dtm_speech <- speech_tdf %>%
cast_dtm(date, word, n)
speech_lda <- LDA(dtm_speech, k = 2, control = list(seed = 2023))
speech_topics <- tidy(speech_lda, matrix = 'beta')
#| label: fig-topterms
#| #| fig-cap: "Time series Plot of Average Sentiment using AFINN Lexicon Scoring System. Higher Values Represent more Positive Sentiment"
top_terms <- speech_topics %>%
group_by(topic) %>%
top_n(15, beta) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) + geom_col(show.legend = FALSE) +   facet_wrap(~ topic, scales = "free") + coord_flip()
speech_lda <- LDA(dtm_speech, k = 5, control = list(seed = 2023))
speech_topics <- tidy(speech_lda, matrix = 'beta')
speech_topics <- tidy(speech_lda, matrix = 'beta')
# words_to_remove <- c("government", "South Africa", "national",
#                      "country", "south", "africa", "honourable",
#                      "people", 'ensure', 'public', 'economic',
#                      'continue', 'regard', 'support', 'africans', 'african', 'programme', 'programmes', 'world', 'sector', 'million', 'billion', 'compatriots', 'including', 'chairperson', 'speaker', 'improve', 'address', 'president', 'deputy', 'services')
tidy_speeches <- sona %>%
unnest_tokens(word, speech, token = "words", to_lower = T) %>%
filter(!word %in% stop_words$word) %>%
#filter(!word %in% words_to_remove) %>%
filter(!str_detect(word, "[0-9]"))
speech_tdf <- tidy_speeches%>%
group_by(date,word) %>%
count() %>%
ungroup()
dtm_speech <- speech_tdf %>%
cast_dtm(date, word, n)
speech_lda <- LDA(dtm_speech, k = 5, control = list(seed = 2023))
speech_topics <- tidy(speech_lda, matrix = 'beta')
#| label: fig-topterms
#| #| fig-cap: "Time series Plot of Average Sentiment using AFINN Lexicon Scoring System. Higher Values Represent more Positive Sentiment"
top_terms <- speech_topics %>%
group_by(topic) %>%
top_n(15, beta) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) + geom_col(show.legend = FALSE) +   facet_wrap(~ topic, scales = "free") + coord_flip()
# Calculate coherence scores for topics
coherence_scores <- topic_coherence(speech_lda, dtm_speech)
# Print coherence scores for each topic
coherence_scores
words_to_remove <- c("government", "South Africa", "national",
"country", "south", "africa", "honourable",
"people", 'ensure', 'public', 'economic',
'continue', 'regard', 'support', 'africans', 'african', 'programme', 'programmes', 'world', 'sector', 'million', 'billion', 'compatriots', 'including', 'chairperson', 'speaker', 'improve', 'address', 'president', 'deputy', 'services')
tidy_speeches <- sona %>%
unnest_tokens(word, speech, token = "words", to_lower = T) %>%
filter(!word %in% stop_words$word) %>%
#filter(!word %in% words_to_remove) %>%
filter(!str_detect(word, "[0-9]"))
speech_tdf <- tidy_speeches%>%
group_by(date,word) %>%
count() %>%
ungroup()
dtm_speech <- speech_tdf %>%
cast_dtm(date, word, n)
speech_lda <- LDA(dtm_speech, k = 5, control = list(seed = 2023))
speech_topics <- tidy(speech_lda, matrix = 'beta')
#| label: fig-topterms
#| #| fig-cap: "Time series Plot of Average Sentiment using AFINN Lexicon Scoring System. Higher Values Represent more Positive Sentiment"
top_terms <- speech_topics %>%
group_by(topic) %>%
top_n(15, beta) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) + geom_col(show.legend = FALSE) +   facet_wrap(~ topic, scales = "free") + coord_flip()
words_to_remove <- c("government", "South Africa", "national",
"country", "south", "africa", "honourable",
"people", 'ensure', 'public', 'economic',
'continue', 'regard', 'support', 'africans', 'african', 'programme', 'programmes', 'world', 'sector', 'million', 'billion', 'compatriots', 'including', 'chairperson', 'speaker', 'improve', 'address', 'president', 'deputy', 'services')
tidy_speeches <- sona %>%
unnest_tokens(word, speech, token = "words", to_lower = T) %>%
filter(!word %in% stop_words$word) %>%
filter(!word %in% words_to_remove) %>%
filter(!str_detect(word, "[0-9]"))
speech_tdf <- tidy_speeches%>%
group_by(date,word) %>%
count() %>%
ungroup()
dtm_speech <- speech_tdf %>%
cast_dtm(date, word, n)
speech_lda <- LDA(dtm_speech, k = 5, control = list(seed = 2023))
speech_topics <- tidy(speech_lda, matrix = 'beta')
#| label: fig-topterms
#| #| fig-cap: "Time series Plot of Average Sentiment using AFINN Lexicon Scoring System. Higher Values Represent more Positive Sentiment"
top_terms <- speech_topics %>%
group_by(topic) %>%
top_n(15, beta) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) + geom_col(show.legend = FALSE) +   facet_wrap(~ topic, scales = "free") + coord_flip()
tidy_speeches_2019 <- sona %>%
filter(year == '2020') %>%
unnest_tokens(word, speech, token = "words", to_lower = T) %>%
filter(!word %in% stop_words$word) %>%
filter(!word %in% words_to_remove) %>%
filter(!str_detect(word, "[0-9]"))
speech_tdf_2019 <- tidy_speeches_2019%>%
group_by(date,word) %>%
count() %>%
ungroup()
dtm_speech_2019 <- speech_tdf_2019 %>%
cast_dtm(date, word, n)
speech_lda_2019 <- LDA(dtm_speech_2019, k = 10, control = list(seed = 2023))
speech_topics_2019 <- tidy(speech_lda_2019, matrix = 'beta')
top_terms_2019 <- speech_topics_2019 %>%
group_by(topic) %>%
top_n(15, beta) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms_2019 %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) + geom_col(show.legend = FALSE) +   facet_wrap(~ topic, scales = "free") + coord_flip()
tidy_speeches_2019 <- sona %>%
filter(year == '2021') %>%
unnest_tokens(word, speech, token = "words", to_lower = T) %>%
filter(!word %in% stop_words$word) %>%
filter(!word %in% words_to_remove) %>%
filter(!str_detect(word, "[0-9]"))
speech_tdf_2019 <- tidy_speeches_2019%>%
group_by(date,word) %>%
count() %>%
ungroup()
dtm_speech_2019 <- speech_tdf_2019 %>%
cast_dtm(date, word, n)
speech_lda_2019 <- LDA(dtm_speech_2019, k = 10, control = list(seed = 2023))
speech_topics_2019 <- tidy(speech_lda_2019, matrix = 'beta')
top_terms_2019 <- speech_topics_2019 %>%
group_by(topic) %>%
top_n(15, beta) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms_2019 %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) + geom_col(show.legend = FALSE) +   facet_wrap(~ topic, scales = "free") + coord_flip()
tidy_speeches_2020 <- sona %>%
filter(year == '2020') %>%
unnest_tokens(word, speech, token = "words", to_lower = T) %>%
filter(!word %in% stop_words$word) %>%
filter(!word %in% words_to_remove) %>%
filter(!str_detect(word, "[0-9]"))
speech_tdf_2020 <- tidy_speeches_2019%>%
group_by(date,word) %>%
count() %>%
ungroup()
dtm_speech_2020 <- speech_tdf_2019 %>%
cast_dtm(date, word, n)
speech_lda_2020 <- LDA(dtm_speech_2019, k = 10, control = list(seed = 2023))
speech_topics_2020 <- tidy(speech_lda_2020, matrix = 'beta')
top_terms_2020 <- speech_topics_2020 %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms_2020 %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) + geom_col(show.legend = FALSE) +   facet_wrap(~ topic, scales = "free") + coord_flip()
words_to_remove <- c("government", "South Africa", "national",
"country", "south", "africa", "honourable",
"people", 'ensure', 'public', 'economic',
'continue', 'regard', 'support', 'africans', 'african', 'programme', 'programmes', 'world', 'sector', 'million', 'billion', 'compatriots', 'including', 'chairperson', 'speaker', 'improve', 'address', 'president', 'deputy', 'services')
words_to_remove <- c("government", "South Africa", "national",
"country", "south", "africa", "honourable",
"people", 'ensure', 'public', 'economic',
'continue', 'regard', 'development', 'support', 'africans', 'african', 'programme', 'programmes', 'world', 'sector', 'million', 'billion', 'compatriots', 'including', 'chairperson', 'speaker', 'improve', 'address', 'president', 'deputy', 'services')
tidy_speeches_2020 <- sona %>%
filter(year == '2020') %>%
unnest_tokens(word, speech, token = "words", to_lower = T) %>%
filter(!word %in% stop_words$word) %>%
filter(!word %in% words_to_remove) %>%
filter(!str_detect(word, "[0-9]"))
tidy_speeches_2020 <- sona %>%
filter(year == '2020') %>%
unnest_tokens(word, speech, token = "words", to_lower = T) %>%
filter(!word %in% stop_words$word) %>%
filter(!word %in% words_to_remove) %>%
filter(!str_detect(word, "[0-9]"))
speech_tdf_2020 <- tidy_speeches_2020 %>%
group_by(date,word) %>%
count() %>%
ungroup()
dtm_speech_2020 <- speech_tdf_2020 %>%
cast_dtm(date, word, n)
speech_lda_2020 <- LDA(dtm_speech_2020, k = 10, control = list(seed = 2023))
speech_topics_2020 <- tidy(speech_lda_2020, matrix = 'beta')
top_terms_2020 <- speech_topics_2020 %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms_2020 %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) + geom_col(show.legend = FALSE) +   facet_wrap(~ topic, scales = "free") + coord_flip()
tidy_speeches_2020 <- sona %>%
filter(year == '1994') %>%
unnest_tokens(word, speech, token = "words", to_lower = T) %>%
filter(!word %in% stop_words$word) %>%
filter(!word %in% words_to_remove) %>%
filter(!str_detect(word, "[0-9]"))
speech_tdf_2020 <- tidy_speeches_2020 %>%
group_by(date,word) %>%
count() %>%
ungroup()
dtm_speech_2020 <- speech_tdf_2020 %>%
cast_dtm(date, word, n)
speech_lda_2020 <- LDA(dtm_speech_2020, k = 10, control = list(seed = 2023))
speech_topics_2020 <- tidy(speech_lda_2020, matrix = 'beta')
top_terms_2020 <- speech_topics_2020 %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms_2020 %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) + geom_col(show.legend = FALSE) +   facet_wrap(~ topic, scales = "free") + coord_flip()
tidy_speeches_2020 <- sona %>%
filter(year == '2010') %>%
unnest_tokens(word, speech, token = "words", to_lower = T) %>%
filter(!word %in% stop_words$word) %>%
filter(!word %in% words_to_remove) %>%
filter(!str_detect(word, "[0-9]"))
speech_tdf_2020 <- tidy_speeches_2020 %>%
group_by(date,word) %>%
count() %>%
ungroup()
dtm_speech_2020 <- speech_tdf_2020 %>%
cast_dtm(date, word, n)
speech_lda_2020 <- LDA(dtm_speech_2020, k = 10, control = list(seed = 2023))
speech_topics_2020 <- tidy(speech_lda_2020, matrix = 'beta')
top_terms_2020 <- speech_topics_2020 %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms_2020 %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) + geom_col(show.legend = FALSE) +   facet_wrap(~ topic, scales = "free") + coord_flip()
tidy_speeches_2020 <- sona %>%
filter(year == '1996') %>%
unnest_tokens(word, speech, token = "words", to_lower = T) %>%
filter(!word %in% stop_words$word) %>%
filter(!word %in% words_to_remove) %>%
filter(!str_detect(word, "[0-9]"))
speech_tdf_2020 <- tidy_speeches_2020 %>%
group_by(date,word) %>%
count() %>%
ungroup()
dtm_speech_2020 <- speech_tdf_2020 %>%
cast_dtm(date, word, n)
speech_lda_2020 <- LDA(dtm_speech_2020, k = 10, control = list(seed = 2023))
speech_topics_2020 <- tidy(speech_lda_2020, matrix = 'beta')
top_terms_2020 <- speech_topics_2020 %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms_2020 %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) + geom_col(show.legend = FALSE) +   facet_wrap(~ topic, scales = "free") + coord_flip()
speeches_gamma <- tidy(speech_lda, matrix = "gamma")
speeches_gamma
words_to_remove <- c("government", "South Africa", "national",
"country", "south", "africa", "honourable",
"people", 'ensure', 'public', 'economic',
'continue', 'regard', 'development', 'support', 'africans', 'african', 'programme', 'programmes', 'world', 'sector', 'million', 'billion', 'compatriots', 'including', 'chairperson', 'speaker', 'improve', 'address', 'president', 'deputy', 'services')
tidy_speeches <- sona %>%
unnest_tokens(word, speech, token = "words", to_lower = T) %>%
filter(!word %in% stop_words$word) %>%
filter(!word %in% words_to_remove) %>%
filter(!str_detect(word, "[0-9]"))
speech_tdf <- tidy_speeches%>%
group_by(date,word) %>%
count() %>%
ungroup()
dtm_speech <- speech_tdf %>%
cast_dtm(date, word, n)
speech_lda <- LDA(dtm_speech, k = 6, control = list(seed = 2023))
speech_topics <- tidy(speech_lda, matrix = 'beta')
#| label: fig-topterms
#| #| fig-cap: "Time series Plot of Average Sentiment using AFINN Lexicon Scoring System. Higher Values Represent more Positive Sentiment"
top_terms <- speech_topics %>%
group_by(topic) %>%
top_n(15, beta) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) + geom_col(show.legend = FALSE) +   facet_wrap(~ topic, scales = "free") + coord_flip()
words_to_remove <- c("government", "South Africa", "national",
"country", "south", "africa", "honourable",
"people", 'ensure', 'public', 'economic',
'continue', 'regard', 'development', 'support', 'africans', 'african', 'programme', 'programmes', 'world', 'sector', 'million', 'billion', 'compatriots', 'including', 'chairperson', 'speaker', 'improve', 'address', 'president', 'deputy', 'services')
tidy_speeches <- sona %>%
unnest_tokens(word, speech, token = "words", to_lower = T) %>%
filter(!word %in% stop_words$word) %>%
filter(!word %in% words_to_remove) %>%
filter(!str_detect(word, "[0-9]"))
speech_tdf <- tidy_speeches%>%
group_by(date,word) %>%
count() %>%
ungroup()
dtm_speech <- speech_tdf %>%
cast_dtm(date, word, n)
speech_lda <- LDA(dtm_speech, k = 36, control = list(seed = 2023))
speech_topics <- tidy(speech_lda, matrix = 'beta')
#| label: fig-topterms
#| #| fig-cap: "Time series Plot of Average Sentiment using AFINN Lexicon Scoring System. Higher Values Represent more Positive Sentiment"
top_terms <- speech_topics %>%
group_by(topic) %>%
top_n(5, beta) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) + geom_col(show.legend = FALSE) +   facet_wrap(~ topic, scales = "free") + coord_flip()
speeches_gamma <- tidy(speech_lda, matrix = "gamma")
speeches_gamma
# Calculate coherence scores for topics
coherence_scores <- topic_coherence(speech_lda, dtm_speech)
# Print coherence scores for each topic
coherence_scores
View(top_terms)
View(top_terms)
tidy_speeches <- sona %>%
unnest_tokens(word, speech, token = "words", to_lower = T) %>%
filter(!word %in% stop_words$word) %>%
# filter(!word %in% words_to_remove) %>%
filter(!str_detect(word, "[0-9]"))
speech_tdf <- tidy_speeches%>%
group_by(date,word) %>%
count() %>%
ungroup()
dtm_speech <- speech_tdf %>%
cast_dtm(date, word, n)
speech_lda <- LDA(dtm_speech, k = 36, control = list(seed = 2023))
speech_topics <- tidy(speech_lda, matrix = 'beta')
#| label: fig-topterms
#| #| fig-cap: "Time series Plot of Average Sentiment using AFINN Lexicon Scoring System. Higher Values Represent more Positive Sentiment"
top_terms <- speech_topics %>%
group_by(topic) %>%
top_n(5, beta) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms
top_terms %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) + geom_col(show.legend = FALSE) +   facet_wrap(~ topic, scales = "free") + coord_flip()
words_to_remove <- c("government")
tidy_speeches <- sona %>%
unnest_tokens(word, speech, token = "words", to_lower = T) %>%
filter(!word %in% stop_words$word) %>%
filter(!word %in% words_to_remove) %>%
filter(!str_detect(word, "[0-9]"))
speech_tdf <- tidy_speeches%>%
group_by(date,word) %>%
count() %>%
ungroup()
dtm_speech <- speech_tdf %>%
cast_dtm(date, word, n)
speech_lda <- LDA(dtm_speech, k = 36, control = list(seed = 2023))
speech_topics <- tidy(speech_lda, matrix = 'beta')
#| label: fig-topterms
#| #| fig-cap: "Time series Plot of Average Sentiment using AFINN Lexicon Scoring System. Higher Values Represent more Positive Sentiment"
top_terms <- speech_topics %>%
group_by(topic) %>%
top_n(5, beta) %>%
ungroup() %>%
arrange(topic, -beta)
# Calculate coherence scores for topics
coherence_scores <- topic_coherence(speech_lda, dtm_speech)
# Print coherence scores for each topic
coherence_scores
top_terms <- speech_topics %>%
group_by(topic) %>%
slice_max(beta, n = 10) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms
words_to_remove <- c("government", "south", "people")
tidy_speeches <- sona %>%
unnest_tokens(word, speech, token = "words", to_lower = T) %>%
filter(!word %in% stop_words$word) %>%
filter(!word %in% words_to_remove) %>%
filter(!str_detect(word, "[0-9]"))
speech_tdf <- tidy_speeches%>%
group_by(date,word) %>%
count() %>%
ungroup()
dtm_speech <- speech_tdf %>%
cast_dtm(date, word, n)
speech_lda <- LDA(dtm_speech, k = 36, control = list(seed = 2023))
speech_topics <- tidy(speech_lda, matrix = 'beta')
speech_topics <- tidy(speech_lda, matrix = 'beta')
top_terms <- speech_topics %>%
group_by(topic) %>%
slice_max(beta, n = 10) %>%
ungroup() %>%
arrange(topic, -beta)
ap_top_terms %>%
mutate(term = reorder_within(term, beta, topic)) %>%
ggplot(aes(beta, term, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
scale_y_reordered()
top_terms %>%
mutate(term = reorder_within(term, beta, topic)) %>%
ggplot(aes(beta, term, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
scale_y_reordered()
words_to_remove <- c("government", "south", "people", 'chairperson', 'speaker', 'honourable')
tidy_speeches <- sona %>%
unnest_tokens(word, speech, token = "words", to_lower = T) %>%
filter(!word %in% stop_words$word) %>%
filter(!word %in% words_to_remove) %>%
filter(!str_detect(word, "[0-9]"))
speech_tdf <- tidy_speeches%>%
group_by(date,word) %>%
count() %>%
ungroup()
dtm_speech <- speech_tdf %>%
cast_dtm(date, word, n)
speech_lda <- LDA(dtm_speech, k = 36, control = list(seed = 2023))
speech_topics <- tidy(speech_lda, matrix = 'beta')
speech_topics <- tidy(speech_lda, matrix = 'beta')
top_terms <- speech_topics %>%
group_by(topic) %>%
slice_max(beta, n = 10) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms <- speech_topics %>%
group_by(topic) %>%
slice_max(beta, n = 10) %>%
ungroup() %>%
arrange(topic, -beta)
top_terms %>%
mutate(term = reorder_within(term, beta, topic)) %>%
ggplot(aes(beta, term, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
scale_y_reordered()
