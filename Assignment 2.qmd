---
title: "A Descriptive Analysis of SONA speeches 1994-2023"
author: "Kenneth Ssekimpi & Levy Banda"
student_number: "SSKKEN001 & BNDLEV001"
assignment: "Assignment 2"
editor: visual
embed-resources: true
bibliography: Reference_list.bib
format: html
execute: 
  warning: false
  echo: false
---

```{r setup, include=FALSE}

knitr::opts_knit$set(root.dir = "C:/Users/User/OneDrive/Documents/School/2023/Masters/STA5073Z/Assignments/Assignment 2/ds4l-assignment-2")

knitr::opts_chunk$set(fig.pos = "H", out.extra = "")

```

# Abstract

**Keywords**: sentiment analysis, latent dirichlet allocation, topic modeling, sona

# Introduction

The State of the Nation Address (SONA) in South Africa serves as an opportunity for the president to address the nation and provide an overview of the government's accomplishments, plans, and priorities. This speech marks the opening of Parliament. It is an important political event and a key moment for the president to communicate the government's agenda to the South African Parliament (National Assembly and National Council of Provinces) [@sagov]. At the SONA, the President of South Africa is able to not only inform the nation of the economic and political policies to be carried out, but also encourage South Africans, bringing hope and inspiring confidence in government. For example, after the South African National Rugby team won the Rugby World Cup in 2019, President Cryril Ramaphosa congratulated the team on their achievement and highlighted the pride this brought to the country during his SONA at the beginning of 2020 [@sagov].

Democratic governance can be seen at SONA's, as the president exposes the problems the country is currently facing and possibly provides an account on what is being done to solve them [@eshbaugh2010politics]. [@banguis2019role] highlighted that speeches made by Asian presidents revealed a lot of information about the state of affairs in the periods studied.

The implementation of data mining analysis techniques, such as topic modeling and sentiment analysis, allows for a more profound examination and comprehension of past State of the Nation Addresses (SONAs). Data mining offers the opportunity to gain insights into the challenges faced by previous leaders and to evaluate the ongoing relevance of these issues in contemporary contexts [@miranda2021exploring]

# Literature Review

## Sentiment Analysis

Studies such as [@budiharto2018prediction] have suggested frameworks into using sentiment analysis on posts on relevant topics on some social media websites to predict election results. Sentiment analysis can also be used to determine the mood of the nation by monitoring announcements made by leaders of the country, including presidential candidates [@vo2017multi]. [@bringula2023youtube] analyzed comments on Youtube to analyze opinions from political vloggers about two presidential canditates. Sentiment analysis can be used to summarize political issues and current affairs [@bollen2011modeling]. [@miranda2021exploring] studied State of the Nation Addresses of 13 Philippine presidents and discovered that the speeches had huge focus towards economic development, enhancement of public services, and addressing issues faced by the nation.

### Latent Dirichlet Allocation

Latent Dirichlet allocation (LDA) is a generative probabilistic model for collections of discrete data such as text corpora [@blei2003lda]. It is a topic modelling technique, which means that it can be used to identify thematic topics in large collections of text. While LDA is a relatively new tool in political science research, it has the potential to become an increasingly important tool for understanding political discourse and processes.

LDA has been used in a variety of ways in political science research. For example, it has been used to: analyze the content of political speeches and texts to identify the key topics and themes [@miranda20211exploring]; identify patterns in online discourse polarization and extremism, and the contributions and parameters thereof [@xu2020]; study the relationship between political discourse and political outcomes [@brookes2019]; and identify the most topical issues relating to the COVID-19 pandemic that were being discussed by South Africans on Twitter, as well as the impacts of these issues on the people's reactions to and compliance with the South African government's efforts in managing the disease [@mutanga2022].

Research into LDA techniques' usage in LDA research is still ongoing. According to [@xu2020], current research into LDA's utility to political science have included analyzing the content of political advertising and studying the relationship between political discourse and political violence.

# Data and Methodology

## Data Preprocessing

The full text of State of the Nation Address (SONA) speeches, from 1994 to 2023, was collected from the official South African Governement website. Data preprocessing is an essential phase in text analysis, aimed at transforming the raw text data into a structured format suitable for in-depth analysis of the speeches. For this we chose the 'tidytext' package found in R programming language which provided a versatile platform for text analysis

The initial step in data preprocessing was to identify the date of the speech and the president who addressed the nation. Following this was the removal of special characters, digits and punctuation marks. Elements, such as symbols, commas, periods, and question marks, can introduce noise into the text and hinder accurate analysis. Numerical values and digits hold limited relevance and may disrupt the analysis of textual content. Their exclusion simplifies the text, making it more text-centric.

To extract meaningful information from the text, tokenization is employed. It involves breaking down the continuous string of text into individual units, known as tokens, usually words or phrases. Tokenization provides the foundation for understanding the text's structure and content, making it more amenable to analysis. All the characters in the text are converted to lower case. This ensures that the analysis is not case sensitive. Stop words, commonly occurring words that hold not much meaning, are removed: shifting the focus to content-carrying words, enhancing the identification of significant themes and patterns in the SONA speeches.

## Sentiment Analysis

The aim of the sentiment analysis is to determine the emotional tonality expressed in the State of the Nation Address. At the core of this sentiment analysis lies the sentiment lexicon---a dictionary that associates words or phrases with sentiment scores. In this paper, three different lexicons found in the 'tidyr' package were used: AFINN, bing and nrc. The AFINN lexicon assigns a score to each word in the topic with -5 being the most negative and 5 being the most postive score.The bing lexicon assigns each word in the tolkenized speeches as either negative or positive according to the lexicon association. The nrc lexicon assigns each word in the tolkenized speeches into categories of positive, negative, anger, anticipation, disgust, fear, joy, sadness, surprise, and trust.

## Latent Dirichlet Allocation

LDA is, by its nature, an iterative process. First, determining the number of K's (topics) is an important first step in topic modelling. This leads to the organization and determination of our topics. The interpretation of topics largely depends on the actual context of the speeches and the choice of words. Reviewing each of the thiry six speeches would take tremendous effort; that said, the coherence and relevance of topics needs to be established in order to make meaning out of the model's results.

In addition to the data preprocessing steps for sentiment analysis, particular care was taken to ensure that repetition across topics was minimized as much as possible given the number of topics which we decided to focus on (expanded on further below). Overlap between topics is normal. However, given the number of decided topics, the distinctiveness and interpretability of the topics was initially difficult to distinguish. This is especially evident in a large corpus of text like in our dataset. Thus less informative or repetitive words were removed.

Deciding on the optimal number of topics was done by training the LDA model for each number of topics from two to ten and computing the average of the coherence scores for each topic in each model. Coherence scores are a measure of how well the topics in the model explain the data. It computes the pairwise similarity between the top words in each topic. Semantically coherent topics are indicated by higher coherence scores @blei2003. The averaged coherent scores for each value of K isshown in Figure @fig-ave-coherence. coherence Our dataset has speeches spanning nearly thirty years for six different presidents: thus, despite a lower value of K being associated with higher coherence, we could possibly lose a lot of nuance by choosing a lower value. Although, this could lead to overfitting.

The three factors of interpretability, distinctiveness, and relevance were also taken into account in addition to the averaged coherence scores for each value of K, Each of the three factor will be expanded on below:

-   Interpretability: A smaller number of topics is generally more interpretable, as it easier to understand a smaller number of more general topics. For a larger number of topics, the topics may be more specific and less distinct.

-   Distinctiveness: A larger number of topics is generally more distinctive, as the topics are more specialized and less likely to overlap.

-   Word relevance: In a large number of topics, each word will be associated with a narrower range of topics.

Given the trade-off between these factors as well as the coherence score of each number of topics, eight was decided on as the optimal amount of topics. Relative interpretability and coherence was sacrificed for more distinctiveness and word relevance.

# Results

## Sentiment Analysis

```{r, include=FALSE}
# Clear global environment
# rm(list=ls())

# Libraries we need
libs <- c('dplyr', 'ggplot2', 'kableExtra', 'lubridate', 'purrr', 'reshape2', 'stringr', 'text2vec', 'tidyr', 'tidytext', 'topicdoc', 'topicmodels', 'tm', 'wordcloud')

# Install missing libraries
installed_libs <- libs %in% rownames(installed.packages())
if (any(installed_libs == FALSE)) {
  install.packages(libs[!installed_libs], repos='http://cran.us.r-project.org')
}

# Load libraries
invisible(lapply(libs, library, character.only = TRUE))
```

```{r, include= FALSE}
unzip("sona-addresses-1994-2023.zip", exdir = "data")
```

```{r read_wrangle}
# Get a list of all text files in the directory
text_files <- list.files(path = "data", pattern = ".txt")
# filenames <- purrr::flatten(text_files)
# Initialize an empty list to store the data
# speech_data <- list()
speech_data <- c()
i = 0
num_chars <- c(27050, 12786, 39019, 39524, 37489, 45247, 34674, 41225, 37552, 41719, 50544, 58284, 34590, 39232, 54635, 48643, 48641, 44907, 31101, 47157, 26384, 33281, 33376, 36006, 29403, 36233, 32860, 32464, 35981, 33290, 42112, 56960, 47910, 43352, 52972, 60000)
# Loop through the list of text files and read them into R
for (file in text_files) {
  i = i + 1
  # speech <- readLines(file, warn = FALSE)
  file_handle <- file(paste("data/", file, sep = ""), "r")
  speech <- readChar(file_handle, nchars = num_chars[i])
  # speech_data[[file]] <- speech
  speech_data[i] <- speech
  close(file_handle)
}

sona <- data.frame(filename = text_files, speech = speech_data, stringsAsFactors = FALSE)

# extract year and president for each speech
sona$year <- str_sub(sona$filename, start = 1, end = 4)
sona$president <- str_remove_all(str_extract(sona$filename, "[dA-Z].*\\."), "\\.")

# clean the sona dataset by adding the date and removing unnecessary text
replace_reg <- '(http.*?(\\s|.$))|(www.*?(\\s|.$))|&amp;|&lt;|&gt;|\n'
unnest_reg <- "[^A-Za-z_\\d#@']"
sona <-sona %>%
  mutate(speech = str_replace_all(speech, replace_reg , ' ')
         ,date = str_sub(speech, start=1, end=30)
         ,date = str_replace_all(date, "February", "02")
         ,date = str_replace_all(date, "June", "06")
         ,date = str_replace_all(date, "Feb", "02")
         ,date = str_replace_all(date, "May", "05")
         ,date = str_replace_all(date, "Jun", "06")
         ,date = str_replace_all(date, "Thursday, ","")
         ,date = str_replace_all(date, ' ', '-')        
         ,date = str_replace_all(date, "[A-z]",'')
         ,date = str_replace_all(date, '-----', '')
         ,date = str_replace_all(date, '----', '')
         ,date = str_replace_all(date, '---', '')
         ,date = str_replace_all(date, '--', '')
  )

 

sona$date[36] <- "09-02-2023"
sona$year[36] <- "2023"
sona$date <- dmy(sona$date)

```

```{r preprocess}

speech_tokens <- sona %>%
  unnest_tokens(word, speech, token = "regex", pattern = unnest_reg) %>%
  anti_join(stop_words)
  
words_to_remove <- c("government", "South Africa", "national",
                     "country", "south", "africa", "honourable", 
                     "people")

speech_tokens <- speech_tokens %>%
  filter(!word %in% words_to_remove)


load("dsfi-lexicons.Rdata")

#to be put in the appendices 
set.seed(2023)
bing_sample <- t(bing[sample(1:6786, 10),])
kable(bing_sample, caption = "Sample of bing lexicon")

set.seed(2023)
nrc_sample <- t(nrc[sample(1:6786, 10),])
kable(nrc_sample, caption = "Sample of nrc lexicon")

```

```{r bing sentiment}
speech_sentiment <- speech_tokens %>% 
  left_join(bing, by = "word") %>%
  rename(bing_sentiment = sentiment) %>%
  mutate(bing_sentiment = ifelse(is.na(bing_sentiment), 'neutral', bing_sentiment))

```

```{r}
#| label: fig-positive
#| fig-cap: "Most positive words used by each president"

speech_sentiment %>%
  filter(bing_sentiment == 'positive') %>%
  count(president, word) %>%
  group_by(president) %>% filter(rank(desc(n)) <= 5) %>%
  ggplot(aes(reorder(word,n),n)) + geom_col(aes(fill = word)) + facet_wrap(~president)+
  coord_flip() + labs( y = 'Contribution to Sentiment')
```

```{r}
#| label: fig-nwords
#| fig-cap: "Most Negative words used by each president"
speech_sentiment %>%
  filter(bing_sentiment == 'negative') %>%
  count(president, word) %>%
  group_by(president) %>% filter(rank(desc(n)) <= 5) %>%
  ggplot(aes(reorder(word,n),n)) + geom_col() + facet_wrap(~president) + coord_flip() + xlab('')

```

```{r nrc}

speech_sentiment <- speech_sentiment %>% 
left_join(nrc, by = "word") %>%
rename(nrc_sentiment = sentiment)

speech_sentiment%>% 
  count(president, word) %>%
  group_by(president) %>% filter(rank(desc(n)) <= 5) %>%
  ggplot(aes(reorder(word,n),n)) + geom_col(aes(fill =word)) + facet_wrap(~president) + coord_flip() + labs( y = 'Contribution to Sentiment')


```

We can see from @fig-positive that positive words such as 'reconciliation', 'freedom', 'progress', and 'improve' were commonly occurring in speeches made by Nelson Mandela. The word occurence of 'support' in the speeches seems to be increasing as we move towards the most recent president, Cyril Ramaphosa.

@fig-nwords shows that most negative words used in each of the presidents. This may highlight some of the issues each president had experienced during their tenure. 'Crime' seems to be a word with one of the most commonly occurring in speeches made by Nelson Mandela, Thabo Mbeki, and Jacob Zuma. 'Poverty' is the most occuring negative word in Thabo Mbeki's speeches and also significant in Jacob Zuma's, and Cyril Ramaphosa's speeches.

```{r overall}
#| label: fig-overall
#| fig-cap: "Proportion of sentiment words in speeches for each president"

speech_sentiment%>%
  add_count(president,date, name = "n_words") %>%
  na.omit() %>%
  group_by(president,date, nrc_sentiment) %>%
  summarize(mean_prop = n() / first(n_words)) %>% ungroup() %>%
  ggplot(aes(reorder(nrc_sentiment, mean_prop), mean_prop, fill = president)) + 
  geom_bar(stat = "identity", position = 'dodge') + coord_flip() + xlab('')
```

@fig-overall indicates the proportion of sentiment words, categorized using the nrc lexicon, for each of the presidents. Nelson Mandela's speeches have the highest proportion of positive sentiment while De Klerk's speeches have the the highest negative sentiment. Nelson Mandela's speeches have a relatively high proportion of words associated with anticipation, and fear, but also of joy and trust.

```{r}
#| label: fig-sentimentscore
#| fig-cap: "Time series Plot of Average Sentiment using AFINN Lexicon Scoring System. Higher Values Represent more Positive Sentiment" 

speech_sentiment <- speech_sentiment %>% 
  left_join(afinn, by = "word") %>%
  rename(afinn_value = value) 

speech_sentiment%>%
  select(date, president, word, afinn_value)%>%
  na.omit%>% 
  group_by( date, president) %>%
  summarise(.groups = "drop", Mean_Score = mean(afinn_value)) %>%
  ungroup() %>%
  ggplot(aes(x = date, y = Mean_Score, col = president))+ geom_line() +
  labs(title = "Average Sentiment Score Time Series", x = "date", y = " Average Sentiment Score") +
  theme_minimal()
```

@fig-sentimentscore shows a time series plot provides an overview of how sentiments have evolved over the years in the SONA speeches. There is a major spike in postive sentiment in Thabo Mbeke's address in May 2004 right after his re-election on 14th April 2004. This is followed by a lower average sentiment score for the rest of Mbeki's State of the Nation Addresses for the his second tenure. There was also a sharp decline in Jacob Zuma's SONA on 14th February 2003. Since Ramaphosa's time in office there has been an overall decline in the average sentiment score of the SONA each with the address in February 2022 having the lowest sentiment score since 1994.

## Latent Dirichlet Allocation

```{r LDA preprocessing}
words_to_remove <- c("government", "South Africa", "national",
                     "country", "south", "africa", "honourable", 
                     "people", 'ensure', 'public', 'continue', 'regard', 'development', 'support', 'africans', 'african', 'programme', 'programmes',  'compatriots', 'including',  'improve', 'address', 'president', 'deputy', 'services', 'chairperson', 'speaker', 'madame', 'sector', 'social', 'system', 'service', 'growth', 'million', 'past', 'time', 'process', 'world', 'progress', 'economy', 'economic', 'cape')

tidy_speeches <- sona %>% 
  unnest_tokens(word, speech, token = "words", to_lower = T) %>%
  filter(!word %in% stop_words$word) %>%
  filter(!word %in% words_to_remove) %>%
  filter(!str_detect(word, "[0-9]"))

speech_tdf <- tidy_speeches%>%
  group_by(date,word) %>%
  count() %>%  
  ungroup()

dtm_speech <- speech_tdf %>% 
  cast_dtm(date, word, n)
```

```{r optimal LDA}
#| label: fig-ave-coherence
#| fig-cap: "Topic Coherence Scores (Averaged). Higer values indicates that number of topics are more meaningful (in comparison)" 

# Evaluate a range of topic numbers from 2 to 10
k_list <- seq(2, 10, by = 1)

# Train LDA models for each topic number
models <- lapply(k_list, function(k) LDA(dtm_speech, k = k, control = list(seed = 2023)))

# Calculate the topic coherence score for each model
coherence <- sapply(models, function(model) topic_coherence(model, dtm_speech))

average_coherence_scores <- c()

for (i in seq_along(coherence)) {
  average_coherence_scores[i] <- mean(coherence[[i]])
}

# Plot the topic coherence scores
ggplot(data.frame(k = k_list, coherence = average_coherence_scores), aes(x = k, y = coherence)) +
  geom_point() +
  geom_line(group = 1) +
  ggtitle("Topic Coherence Scores") +
  xlab("Number of Topics") +
  ylab("Coherence Score")
```

```{r LDA_model}
speech_lda <- LDA(dtm_speech, k = 8, control = list(seed = 2023))

speech_topics <- tidy(speech_lda, matrix = 'beta')
```

```{r top_terms}
#| label: fig-topterms-lda
#| fig-cap: "Word-Topic Associations"  

top_terms <- speech_topics %>%
  group_by(topic) %>%
  slice_max(beta, n = 10) %>% 
  ungroup() %>%
  arrange(topic, -beta)

top_terms %>%
  mutate(term = reorder_within(term, beta, topic)) %>%
  ggplot(aes(beta, term, fill = factor(topic))) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~ topic, scales = "free") +
  scale_y_reordered()
```

\@fig-topterms-lda shows the most frequent words for each of the eight topics organized in descending order of the words' per-topic-per-word probabilities. The topics can be interpreted as follows:

1.  **National Aspirations and Democracy**: this category represents topics related to national hopes, democratic values, and critical issues impacting society and citizens' lives. It emphasizes building strong relations within the nation.
2.  **Security, Jobs, and Local Development**: this category centers on security concerns, job creation, local development, and empowering women to ensure freedom and safety in local communities.
3.  **Societal Implementation and Poverty Alleviation**: this category focuses on implementing societal changes, addressing poverty, and enhancing community capacity and financial well-being. It's about improving the quality of life.
4.  **Infrastructure, Business, and Education**: this category highlights topics related to infrastructure development, business growth, education, and land management. It addresses planning for local development and education.
5.  **Business Investment and Health**: this category emphasizes business investment, job creation, infrastructure development, and measure to ensure better health in societies.
6.  **Society, Security, and Local Governance**: this category covers societal and security concerns, life matters local governance, and democratic land management. It's about maintaining critical societal aspects.
7.  **Human Welfare, Peace, and Global Engagement**: this category delves into human welfare, poverty, international relations, and hopes for a peaceful society and engagement in global matters over a decade.
8.  **Infrastructure Investment and Anti-Corruption**: this category highlights infrastructure investment, billion-dollar projects, energy, and water management, with an emphasis on reducing corruption and empowering women.

```{r}
sona$speechId <- as.numeric(speech_lda@documents)

speeches_gamma_init <- tidy(speech_lda, matrix = "gamma")

speeches_gamma <- sona %>% 
    left_join(speeches_gamma_init %>% 
    mutate(speechId = as.numeric(document)) %>% 
    select(-document) %>%
    spread(key = topic, value = gamma, sep = "_"))
```

```{r}
speeches_gamma_tbl <- speeches_gamma %>% 
  group_by(date, president) %>% 
  summarize('National Aspirations and Democracy' = sum(topic_1 > 0.5), 'Security, Jobs, and Local Development' = sum(topic_2 > 0.5), 'Societal Implementation and Poverty Alleviation' = sum(topic_3 > 0.5), 'Infrastructure, Business, and Education' = sum(topic_4 > 0.5), 'Business Investment and Health' = sum(topic_5 > 0.5), 'Society, Security, and Local Governance' = sum(topic_6 > 0.5), 'Human Welfare, Peace, and Global Engagement' = sum(topic_7 > 0.5), 'Infrastructure Investment and Anti-Corruption' = sum(topic_8 > 0.5))

# For appendix
kable(speeches_gamma_tbl, caption = "Presidential-Topic Association")
```

```{r}
#| label: fig-prez-topic
#| fig-cap: "President-Topic Association Boxplot"

# Reshape the data to long format
speeches_long <- speeches_gamma %>%
  select(year, president, starts_with("topic")) %>%
  pivot_longer(cols = starts_with("topic"), names_to = "topic", values_to = "gamma")

# Create a boxplot of each president's influence on each topic
ggplot(speeches_long, aes(x = president, y = gamma, fill = topic)) +
  geom_boxplot() +
  labs(x = "President", y = "Topic Influence (Gamma Score)", fill = "Topic") +
  scale_fill_discrete(name = "Topic") +
  theme_minimal()
```

@fig-prez-topic shows the per-document-per-topic probability by gamma. It shows how well the LDA model distinguishes between the different topics for each president. President de Klerk and President Motlanthe's distributions are noteworthy here: each is only represented by one speech, hence not much relevance is established to the topics. The dataset is unbalanced in this regard. Of course, de Klerk was the outgoing president at the turn of democracy in 1994, and Motlanthe served as the interim president when President Mbeki was recalled by his own party, the African National Congress (ANC), for the remainder of Mbeki's term.

As years pass, it is natural to expect that certain topics are associated with certain presidents. President Mandela's term heralded the birth of modern South Africa. His speeches have notable associations with nation building and democracy (topic 1) and establishing a new society (topic 6).

President Mbeki's, in turn, spoke to addressing poverty, increasing economic prosperity (Broad-Based Black Economic Empowerment legislation came into effect in 2003), peace (the 2001 terrorist attack on American soil spawned several wars in the Middle East region), and growing global influence.

President Zuma focussed quite heavily on infrastructure and growth. Indeed, the 2010 FIFA World Cup occurred under his presidency.

Lastly, President Ramaphosa has an association with continued infrastructure development, business investment (he is noted as an adept businessman), and health. Less than a year after his presidential term began, the COVID-19 virus caused a global pandemic. Anti-corruption rhetoric is also noted here: he succeeded President Zuma, who resigned in 2018 amidst his misuse of state expenditure for personal gain. His term is also associated with advocating for peace amidst the gender-based violence protests that occurred towards the end of 2019.

```{r}
#| label: fig-topic-time
#| fig-cap: "Topic Relevance Over Time"
#| fig-width: 10
#| fig-height: 10

# Reshape the data to long format for plotting
speeches_long <- speeches_gamma %>%
  gather(topic, proportion, starts_with("topic")) %>%
  mutate(topic = sub("topic_", "", topic) %>% as.numeric()) %>%
  filter(proportion > 0.5) %>%
  arrange(year, president)

all_years <- all_years <- unique(speeches_long$year)

speeches_long['topic'][speeches_long['topic'] == 1] <- '1: National Aspirations & Democracy'
speeches_long['topic'][speeches_long['topic'] == 2] <- '2: Security, Jobs, & Local Development'
speeches_long['topic'][speeches_long['topic'] == 3] <- '3: Societal Implementation & Poverty Alleviation'
speeches_long['topic'][speeches_long['topic'] == 4] <- '4: Infrastructure, Business, and Education'
speeches_long['topic'][speeches_long['topic'] == 5] <- '5: Business Investment & Health'
speeches_long['topic'][speeches_long['topic'] == 6] <- '6: Society, Security, & Local Governance'
speeches_long['topic'][speeches_long['topic'] == 7] <- '7: Human Welfare, Peace, & Global Engagement'
speeches_long['topic'][speeches_long['topic'] == 8] <- '8: Infrastructure Investment & Anti-Corruption'

# Create a stacked bar plot
ggplot(speeches_long, aes(x = factor(year, levels = all_years), fill = factor(topic))) +
  geom_bar() +
  labs(x = "Year", y = "Number of Speeches", fill = "Topic") +
  scale_fill_discrete(name = "Topic") +
  theme_minimal() +
  scale_x_discrete(expand = c(0, 0))
```

@fig-topic-time shows the relevance of each topic over time. This graph can be interpreted along with @fig-prez-topic, seeing as, respectively, each president term-of-office was as follows:

-   de Klerk: 1989 - 1994

-   Mandela: 1994 - 1999

-   Mbeki: 1999 - 2008

-   Motlanthe - 2008-2009

-   Zuma: 2009 - 2018

-   Ramaphosa: 2018 - current

Each presidential administration faces unique challenges that distinguishes itself from the other; and each presidential term is five years, which coincides with the election cycle. Thus the theme-presidential association applies here, too.

# Discussion

# Conclusion

\newpage

### References

::: {#refs}
:::
