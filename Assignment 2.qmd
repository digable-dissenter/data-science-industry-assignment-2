---
title: "A Descriptive Analysis of SONA speeches 1994-2023"
author: "Kenneth Ssekimpi & Levy Banda"
student_number: "SSKKEN001 & BNDLEV001"
assignment: "Assignment 2"
editor: visual
embed-resources: true
bibliography: Reference_list.bib
format: html
execute: 
  warning: false
  echo: false
---

```{r setup, include=FALSE}

knitr::opts_knit$set(root.dir = "C:/Users/User/OneDrive/Documents/School/2023/Masters/STA5073Z/Assignments/Assignment 2/ds4l-assignment-2")

knitr::opts_chunk$set(fig.pos = "H", out.extra = "")

```

# Abstract

# Introduction

The State of the Nation Address (SONA) in South Africa serves as an opportunity for the president to address the nation and provide an overview of the government's accomplishments, plans, and priorities. This speech marks the opening of Parliament. It is an important political event and a key moment for the president to communicate the government's agenda to the South African Parliament (National Assembly and National Council of Provinces) [@sagov]. At the SONA, the President of South Africa is able to not only inform the nation of the economic and political policies to be carried out, but also encourage South Africans, bringing hope and inspiring confidence in government. For example, after the South African National Rugby team won the Rugby World Cup in 2019, President Cryril Ramaphosa congratulated the team on their achievement and highlighted the pride this brought to the country during his SONA at the beginning of 2020 [@sagov].

Democratic governance can be seen at SONA's, as the president exposes the problems the country is currently facing and possibly provides an account on what is being done to solve them [@eshbaugh2010politics]. [@banguis2019role] highlighted that speeches made by Asian presidents revealed a lot of information about the state of affairs in the periods studied.

The implementation of data mining analysis techniques, such as topic modeling and sentiment analysis, allows for a more profound examination and comprehension of past State of the Nation Addresses (SONAs). Data mining offers the opportunity to gain insights into the challenges faced by previous leaders and to evaluate the ongoing relevance of these issues in contemporary contexts [@miranda2021exploring]

# Literature Review

## Sentiment Analysis

Studies such as [@budiharto2018prediction] have suggested frameworks into using sentiment analysis on posts on relevant topics on some social media websites to predict election results. Sentiment analysis can also be used to determine the mood of the nation by monitoring announcements made by leaders of the country, including presidential candidates [@vo2017multi]. [@bringula2023youtube] analyzed comments on Youtube to analyze opinions from political vloggers about two presidential canditates. Sentiment analysis can be used to summarize political issues and current affairs [@bollen2011modeling]. [@miranda2021exploring] studied State of the Nation Addresses of 13 Philippine presidents and discovered that the speeches had huge focus towards economic development, enhancement of public services, and addressing issues faced by the nation.

### Latent Dirichlet Allocation

Latent Dirichlet allocation (LDA) is a generative probabilistic model for collections of discrete data such as text corpora [@blei2003lda]. It is a topic modelling technique, which means that it can be used to identify the latent topics in a corpus of text.

LDA has been used in a variety of ways in political science research. For example, it has been used to:

-   Analyze the content of political speeches and texts to identify the key topics and themes \[\@miranda2021exploring\].

-   Track the evolution of public opinion over time by analyzing social media posts and other forms of online discourse

-   Identify patterns in political polarization and extremism

-   Study the relationship between political discourse and political outcomes

Here are some specific examples of how LDA has been used in political science research:

-   \[\@budiharto2018prediction\] used LDA to analyze social media posts on election-related topics in Indonesia to predict the outcome of the 2019 Indonesian presidential election.

-   \[\@vo2017multi\] used LDA to analyze the content of speeches made by South Korean politicians during the 2017 South Korean presidential election to identify the key topics and themes of the campaign.

-   \[\@bringula2023youtube\] used LDA to analyze comments on YouTube videos from political vloggers to identify the opinions of voters on the 2022 Philippine presidential election.

## **Potential Applications of LDA in Political Science**

LDA has the potential to be used in a variety of other ways in political science research. For example, it could be used to:

-   Analyze the content of political manifestos to identify the key policy priorities of different political parties

-   Study the relationship between political discourse in different media outlets

-   Identify cross-national patterns in political discourse

-   Analyze the content of political advertising

-   Study the relationship between political discourse and political violence

LDA is a relatively new tool in political science research, but it has the potential to become an increasingly important tool for understanding political discourse and processes.

# Data and Methodology

## Data Preprocessing

The full text of State of the Nation Address (SONA) speeches, from 1994 to 2023, was collected from the official South African Governement website. Data preprocessing is an essential phase in text analysis, aimed at transforming the raw text data into a structured format suitable for in-depth analysis of the speeches. For this we chose the 'tidytext' package found in R programming language which provided a versatile platform for text analysis

The initial step in data preprocessing was to identify the date of the speech and the president who addressed the nation. Following this was the removal of special characters, digits and punctuation marks. Elements, such as symbols, commas, periods, and question marks, can introduce noise into the text and hinder accurate analysis. Numerical values and digits hold limited relevance and may disrupt the analysis of textual content. Their exclusion simplifies the text, making it more text-centric.

To extract meaningful information from the text, tokenization is employed. It involves breaking down the continuous string of text into individual units, known as tokens, usually words or phrases. Tokenization provides the foundation for understanding the text's structure and content, making it more amenable to analysis. All the characters in the text are converted to lower case. This ensures that the analysis is not case sensitive. Stop words, commonly occurring words that hold not much meaning, are removed: shifting the focus to content-carrying words, enhancing the identification of significant themes and patterns in the SONA speeches.

## Sentiment Analysis

The aim of the sentiment analysis is to determine the emotional tonality expressed in the State of the Nation Address. At the core of this sentiment analysis lies the sentiment lexicon---a dictionary that associates words or phrases with sentiment scores. In this paper, three different lexicons found in the 'tidyr' package were used: AFINN, bing and nrc. The AFINN lexicon assigns a score to each word in the topic with -5 being the most negative and 5 being the most postive score.The bing lexicon assigns each word in the tolkenized speeches as either negative or positive according to the lexicon association. The nrc lexicon assigns each word in the tolkenized speeches into categories of positive, negative, anger, anticipation, disgust, fear, joy, sadness, surprise, and trust.

# Results

## Sentiment Analysis

```{r, include=FALSE}
# Clear global environment
rm(list=ls())

# Libraries we need
libs <- c('dplyr', 'ggplot2', 'lubridate', 'purrr', 'reshape2', 'stringr', 'text2vec', 'tidyr', 'tidytext', 'topicmodels', 'tm', 'wordcloud', "kableExtra")

# Install missing libraries
installed_libs <- libs %in% rownames(installed.packages())
if (any(installed_libs == FALSE)) {
  install.packages(libs[!installed_libs], repos='http://cran.us.r-project.org')
}

# Load libraries
invisible(lapply(libs, library, character.only = TRUE))
```

```{r, include= FALSE}
unzip("sona-addresses-1994-2023.zip", exdir = "data")
```

```{r read_wrangle}
# Get a list of all text files in the directory
text_files <- list.files(path = "data", pattern = ".txt")
# filenames <- purrr::flatten(text_files)
# Initialize an empty list to store the data
# speech_data <- list()
speech_data <- c()
i = 0
num_chars <- c(27050, 12786, 39019, 39524, 37489, 45247, 34674, 41225, 37552, 41719, 50544, 58284, 34590, 39232, 54635, 48643, 48641, 44907, 31101, 47157, 26384, 33281, 33376, 36006, 29403, 36233, 32860, 32464, 35981, 33290, 42112, 56960, 47910, 43352, 52972, 60000)
# Loop through the list of text files and read them into R
for (file in text_files) {
  i = i + 1
  # speech <- readLines(file, warn = FALSE)
  file_handle <- file(paste("data/", file, sep = ""), "r")
  speech <- readChar(file_handle, nchars = num_chars[i])
  # speech_data[[file]] <- speech
  speech_data[i] <- speech
  close(file_handle)
}

sona <- data.frame(filename = text_files, speech = speech_data, stringsAsFactors = FALSE)

# extract year and president for each speech
sona$year <- str_sub(sona$filename, start = 1, end = 4)
sona$president <- str_remove_all(str_extract(sona$filename, "[dA-Z].*\\."), "\\.")

# clean the sona dataset by adding the date and removing unnecessary text
replace_reg <- '(http.*?(\\s|.$))|(www.*?(\\s|.$))|&amp;|&lt;|&gt;|\n'

sona <-sona %>%
  mutate(speech = str_replace_all(speech, replace_reg , ' ')
         ,date = str_sub(speech, start=1, end=30)
         ,date = str_replace_all(date, "February", "02")
         ,date = str_replace_all(date, "June", "06")
         ,date = str_replace_all(date, "Feb", "02")
         ,date = str_replace_all(date, "May", "05")
         ,date = str_replace_all(date, "Jun", "06")
         ,date = str_replace_all(date, "Thursday, ","")
         ,date = str_replace_all(date, ' ', '-')        
         ,date = str_replace_all(date, "[A-z]",'')
         ,date = str_replace_all(date, '-----', '')
         ,date = str_replace_all(date, '----', '')
         ,date = str_replace_all(date, '---', '')
         ,date = str_replace_all(date, '--', '')
  )

 

sona$date[36] <- "09-02-2023"
sona$year[36] <- "2023"
sona$date <- dmy(sona$date)

```

```{r preprocess}

speech_tokens <- sona %>%
  unnest_tokens(word, speech) %>%
  anti_join(stop_words)
  
words_to_remove <- c("government", "South Africa", "national",
                     "country", "south", "africa", "honourable", 
                     "people")

speech_tokens <- speech_tokens %>%
  filter(!word %in% words_to_remove)


load("dsfi-lexicons.Rdata")

#to be put in the appendices 
set.seed(2023)
bing_sample <- t(bing[sample(1:6786, 10),])
kable(bing_sample, caption = "Sample of bing lexicon")

set.seed(2023)
nrc_sample <- t(nrc[sample(1:6786, 10),])
kable(nrc_sample, caption = "Sample of nrc lexicon")

```

```{r bing sentiment}
speech_sentiment <- speech_tokens %>% 
  left_join(bing, by = "word") %>%
  rename(bing_sentiment = sentiment) %>%
  mutate(bing_sentiment = ifelse(is.na(bing_sentiment), 'neutral', bing_sentiment))

```

```{r}
#| label: fig-positive
#| fig-cap: "Most positive words used by each president"

speech_sentiment %>%
  filter(bing_sentiment == 'positive') %>%
  count(president, word) %>%
  group_by(president) %>% filter(rank(desc(n)) <= 5) %>%
  ggplot(aes(reorder(word,n),n)) + geom_col(aes(fill = word)) + facet_wrap(~president)+
  coord_flip() + labs( y = 'Contribution to Sentiment')
```

```{r}
#| label: fig-nwords
#| fig-cap: "Most Negative words used by each president"
speech_sentiment %>%
  filter(bing_sentiment == 'negative') %>%
  count(president, word) %>%
  group_by(president) %>% filter(rank(desc(n)) <= 5) %>%
  ggplot(aes(reorder(word,n),n)) + geom_col() + facet_wrap(~president) + coord_flip() + xlab('')

```

```{r nrc}

speech_sentiment <- speech_sentiment %>% 
left_join(nrc, by = "word") %>%
rename(nrc_sentiment = sentiment)

speech_sentiment%>% 
  count(president, word) %>%
  group_by(president) %>% filter(rank(desc(n)) <= 5) %>%
  ggplot(aes(reorder(word,n),n)) + geom_col(aes(fill =word)) + facet_wrap(~president) + coord_flip() + labs( y = 'Contribution to Sentiment')


```

We can see from Figure @fig-positive that positive words such as 'reconciliation', 'freedom', 'progress', and 'improve' were commonly occurring in speeches made by Nelson Mandela. The word occurence of 'support' in the speeches seems to be increasing as we move towards the most recent president, Cyril Ramaphosa.

Figure @fig-nwords shows that most negative words used in each of the presidents. This may highlight some of the issues each president had experienced during their tenure. 'Crime' seems to be a word with one of the most commonly occurring in speeches made by Nelson Mandela, Thabo Mbeki, and Jacob Zuma. 'Poverty' is the most occuring negative word in Thabo Mbeki's speeches and also significant in Jacob Zuma's, and Cyril Ramaphosa's speeches.

```{r overall}
#| label: fig-overall
#| fig-cap: "Proportion of sentiment words in speeches for each president"

speech_sentiment%>%
  add_count(president,date, name = "n_words") %>%
  na.omit() %>%
  group_by(president,date, nrc_sentiment) %>%
  summarize(mean_prop = n() / first(n_words)) %>% ungroup() %>%
  ggplot(aes(reorder(nrc_sentiment, mean_prop), mean_prop, fill = president)) + 
  geom_bar(stat = "identity", position = 'dodge') + coord_flip() + xlab('')
```

```{r LDA}
speech_tdf <- speech_tokens%>%
  group_by(date,word) %>%
  count() %>%  
  ungroup()

dtm_speech <- speech_tdf %>% 
  cast_dtm(date, word, n)

speech_lda <- LDA(dtm_speech, k = 36, control = list(seed = 2023))

speech_topics <- tidy(speech_lda, matrix = 'beta')

speech_topics %>%
  group_by(topic) %>%
  slice_max(n = 1, order_by = beta) %>% ungroup() %>%
  arrange(topic, -beta) %>%
  ggplot(aes(reorder(term, beta), beta, fill = factor(topic))) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~ topic, scales = 'free') + coord_flip()
```

Figure @fig-overall indicates the proportion of sentiment words, categorized using the nrc lexicon, for each of the presidents. Nelson Mandela's speeches have the highest proportion of positive sentiment while De Klerk's speeches have the the highest negative sentiment. Nelson Mandela's speeches have a relatively high proportion of words associated with anticipation, and fear, but also of joy and trust.

```{r, echo = FALSE, warning=FALSE}
#| label: fig-sentimentscore
#| fig-cap: "Time series Plot of Average Sentiment using AFINN Lexicon Scoring System. Higher Values Represent more Positive Sentiment" 

speech_sentiment <- speech_sentiment %>% 
  left_join(afinn, by = "word") %>%
  rename(afinn_value = value) 

speech_sentiment%>%
  select(date, president, word, afinn_value)%>%
  na.omit%>% 
  group_by( date, president) %>%
  summarise(.groups = "drop", Mean_Score = mean(afinn_value)) %>%
  ungroup() %>%
  ggplot(aes(x = date, y = Mean_Score, col = president))+ geom_line() +
  labs(title = "Average Sentiment Score Time Series", x = "date", y = " Average Sentiment Score") +
  theme_minimal()
```

Figure @fig-sentimentscore shows a time series plot provides an overview of how sentiments have evolved over the years in the SONA speeches. There is a major spike in postive sentiment in Thabo Mbeke's address in May 2004 right after his re-election on 14th April 2004. This is followed by a lower average sentiment score for the rest of Mbeki's State of the Nation Addresses for the his second tenure. There was also a sharp decline in Jacob Zuma's SONA on 14th February 2003. Since Ramaphosa's time in office there has been an overall decline in the average sentiment score of the SONA each with the address in February 2022 having the lowest sentiment score since 1994.

\newpage

### References

::: {#refs}
:::
